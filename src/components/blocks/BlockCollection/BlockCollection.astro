---
import DirectusImage from '@/components/ui/DirectusImage.astro';
import MasonGrid from '@/components/ui/MasonGrid.astro';
import ParallaxGrid from '@/components/ui/ParallaxGrid.astro';
import CarouselGrid from '@/components/ui/CarouselGrid.astro';
import Table from '@/components/ui/Table.astro';
import PillLink from '@/components/ui/PillLink.astro';
import type {
  BlockCollection,
  Posts,
  Projects
} from '@/types/directusCollection';
import Section from '@/layouts/Section.astro';
import Button from '@/components/ui/Button.astro';
import { getItems } from '@/directus/queries/utils';
import { getProject } from '@/directus/queries/project';
import { getArticles } from '@/directus/queries/articles';

const props = Astro.props as BlockCollection;
const { tagline, headline, limit, collection, layouts } = props;

// Debug logging
console.log('BlockCollection props:', { tagline, headline, limit, collection, layouts });
console.log('Collection type:', typeof collection, 'Value:', collection);

// Use appropriate query function based on collection type
let items: any[];
if (collection === 'projects') {
  console.log('Fetching projects...');
  items = await getProject() as Projects[];
  console.log('Projects fetched:', items);
} else {
  console.log('Fetching posts...');
  items = await getArticles() as Posts[];
  console.log('Posts fetched:', items);
}

// Apply limit if specified
if (limit && Number(limit) > 0) {
  items = items.slice(0, Number(limit));
}

// Normalize items to have consistent structure based on collection type
const normalized = items.map((item) => {
  if (collection === 'projects') {
    // Projects structure
    return {
      slug: item.slug,
      title: item.title,
      description: item.description,
      image: (item as Projects).cover_image,
      published_at: (item as Projects).date_created
    };
  } else {
    // Posts structure
    return {
      slug: item.slug,
      title: item.title,
      description: item.description,
      image: (item as Posts).image,
      published_at: (item as Posts).published_at
    };
  }
});

const basePath = collection === 'projects' ? '/projects' : '/blog';
const label = collection === 'projects' ? 'Project' : 'Post';
---

<Section
  id="block-collection"
  fullWidth
  class="flex flex-col items-center justify-center gap-24 px-6 py-52 text-pretty"
>
  <!-- Intro -->
  <div class="flex flex-col gap-4">
    {tagline && (
    <p class="text-sm text-gray-500 uppercase tracking-wide">{tagline}</p>
    )}
    {headline && (
    <h4 class="text-3xl lg:text-5xl font-semibold leading-tight text-gray-900">
      {headline}
    </h4>
    )}
  </div>

  <!-- Layout Components -->
  {layouts === 'mason' && <MasonGrid posts={normalized} base={collection === 'projects' ? 'project' : 'post'} />}
  {layouts === 'parallax' && <ParallaxGrid posts={normalized} base={collection === 'projects' ? 'project' : 'post'} />}
  {layouts === 'carousel' && <CarouselGrid posts={normalized} base={collection === 'projects' ? 'project' : 'post'} />}
  {layouts === 'list' && <Table posts={normalized} base={collection === 'projects' ? 'project' : 'post'} />}

  <!-- View All Button -->
  <div class="mt-12">
    <PillLink href={basePath}>
      View All {label}s
    </PillLink>
  </div>

  <script>
    import registerBlockCollectionHooks from './BlockCollection.barba.ts';
    import registerTableHooks from '@/components/ui/Table.barba.ts';
    import registerParallaxGridHooks from '@/components/ui/ParallaxGrid.barba.ts';
    registerBlockCollectionHooks();
    registerTableHooks();
    registerParallaxGridHooks();
  </script>
</Section>
