---
import type { BlockPosts } from '@/types/directusCollection';
import { getItems } from '@/directus/queries/utils';
import Section from '@/layouts/Section.astro';
import MasonGrid from '@/components/ui/MasonGrid.astro';
import Table from '@/components/ui/Table.astro';

const props = Astro.props as BlockPosts;
const { headline, tagline, limit, collection } = props;

// Resolve safe defaults
const resolvedCollection = typeof collection === 'string' && collection.trim() ? collection : 'posts';
const resolvedLimit = typeof limit === 'number' && Number.isFinite(limit) && limit > 0 ? limit : undefined;

// Fetch items from the specified collection with guards so SSR can't break the page
type CardItem = { slug?: string | null; title?: string | null; description?: string | null; image?: string | null; published_at?: string | null };
let items: any[] = [];
try {
  items = await getItems<any>(resolvedCollection, resolvedLimit as any);
} catch (err) {
  console.error('Failed to load items for BlockPosts:', err);
  items = [];
}

// Normalize to common shape for grid/table
const base = resolvedCollection === 'projects' ? 'project' : 'post';
const normalized: CardItem[] = (items || []).map((it: any) => ({
  slug: it?.slug ?? null,
  title: it?.title ?? null,
  description: it?.description ?? null,
  image: (base === 'project' ? it?.cover_image : it?.image) ?? null,
  published_at: (base === 'project' ? it?.date_created : it?.published_at) ?? null,
}));

// For now, let's create some mock categories since Posts doesn't have tags
// In a real implementation, you'd need to add a tags field to your Posts collection
const mockCategories = ['Design', 'Development', 'Tutorial', 'News'];
---

<Section id="posts-block" fullWidth class="relative overflow-hidden">
  <!-- Hero Section -->
  <div class="flex w-full px-6 items-center flex-col justify-between pt-10 pb-6 gap-24 relative z-10">
    <h1 class="posts-headline transition-all tracking-tighter text-7xl md:text-[10vw] inline-block text-pretty break-keep leading-[.99] uppercase text-center">
      {headline || "Latest Posts"}
    </h1>
<!-- 
    <div class="flex gap-2 items-end w-full flex-col">
      <div class="md:w-1/2">
        <h2 class="text-lg uppercase tracking-wider text-neutral-500 mb-1">
          {tagline || "Discover our latest articles and insights"}
        </h2>
        <h4 class="text-4xl md:text-[5vw] uppercase font-light leading-tight tracking-tighter">
          Knowledge & Insights
        </h4>
        <p class="text-lg text-gray-600 mt-4">
          Explore our curated collection of articles, tutorials, and thoughts
        </p>
      </div>
    </div>
  </div> -->

  <!-- Controls Section -->
  <div class="px-6 py-12 w-full">
    <div class="max-w-7xl mx-auto">
      <!-- Category Filters -->
      <div class="mb-8">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Filter by Category</h3>
        <div class="flex flex-wrap gap-3">
          <button 
            class="category-btn active px-4 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors"
            data-category="all"
          >
            All Posts
          </button>
          {mockCategories.map((category) => (
            <button 
              class="category-btn px-4 py-2 bg-gray-200 text-gray-700 rounded-lg text-sm font-medium hover:bg-gray-300 transition-colors"
              data-category={category}
            >
              {category}
            </button>
          ))}
        </div>
      </div>

      <!-- Layout Toggle -->
      <div class="flex justify-between items-center mb-8">
        <div class="text-sm text-gray-600">
          <span id="post-count">{normalized?.length || 0}</span> items found
        </div>
        <div class="hidden md:flex items-center gap-2 bg-gray-200 rounded-lg p-1">
          <button 
            class="layout-btn active px-3 py-2 bg-white text-gray-900 rounded-md text-sm font-medium shadow-sm transition-all"
            data-layout="mason"
          >
            Grid
          </button>
          <button 
            class="layout-btn px-3 py-2 text-gray-600 rounded-md text-sm font-medium hover:text-gray-900 transition-colors"
            data-layout="table"
          >
            Table
          </button>
        </div>
      </div>

      <!-- Posts Container -->
      <div id="posts-container" class="posts-mason">
        <MasonGrid posts={normalized} base={base} />
      </div>
      
      <div id="posts-table" class="posts-table hidden md:hidden">
        <Table posts={normalized} base={base} />
      </div>
      {(!normalized || normalized.length === 0) && (
        <div class="mt-8 text-center text-gray-500">No posts found.</div>
      )}
    </div>
  </div>

  <script src="./BlockPosts.barba.ts"></script>
</Section>

