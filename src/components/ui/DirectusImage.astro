---
import { getImage, fileUrl, getThumbnail } from "@/directus/queries/files";
import type { DirectusFiles } from "@/types/directusCollection";
import { tw } from "@/lib/tw";
import { Image } from "astro:assets"; 

interface Props {
  image?: DirectusFiles;
  imageId?: string;
  alt?: string;
  width?: number;
  height?: number;
  format?: string;
  class?: string;
  disableMask?: boolean; // Optional prop to disable mask animation
  fillContainer?: boolean; // Optional prop to make image fill its container
  useSimpleMask?: boolean; // Use simple CSS mask instead of GSAP-compatible one
  scrollImage?: boolean; // Make image larger for scroll animations
}

const {
  image,
  imageId: rawId,
  alt: altProp,
  width: overrideWidth,
  height: overrideHeight,
  class: className,
  disableMask = false,
  fillContainer = false,
  useSimpleMask = false,
  scrollImage = false,
  ...rest
} = Astro.props as Props;

// Safely resolve image ID
const imageId = rawId ?? image?.id;
if (!imageId) {
  return null;
}

// Attempt to resolve width/height from image or API
let width = overrideWidth ?? image?.width ?? undefined;
let height = overrideHeight ?? image?.height ?? undefined;
let alt = altProp ?? image?.description ?? "";

// Fetch dimensions if missing
if (width === undefined || height === undefined) {
  const fetched = await getImage(imageId);
  width ??= fetched?.width ?? 1;
  height ??= fetched?.height ?? 1;
  if (!alt && fetched?.description) alt = fetched.description;
}

// Final sanity check
if (typeof width !== "number" || typeof height !== "number") {
  return null;
}

const src = await getThumbnail(imageId, { format: "webp", width, height });
---

{fillContainer ? (
  <Image
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading="lazy"
    class={tw(className)}
    {...rest}
  />
) : (
  <div class={`directus-image-container overflow-hidden ${disableMask ? '' : useSimpleMask ? 'simple-mask' : 'gsap-mask'} ${scrollImage ? 'scroll-container' : ''}`}>
    <Image
      src={src}
      alt={alt}
      width={width}
      height={height}
      loading="lazy"
      class={tw(className)}
      {...rest}
    />
  </div>
)}

<style>
  /* Simple CSS mask animation - for components without GSAP */
  .simple-mask {
    clip-path: inset(100% 0% 0% 0%);
  }
  
  .simple-mask.animate-in {
    clip-path: inset(0% 0% 0% 0%);
    transition: clip-path 1.2s ease-out;
  }
  
  /* GSAP-compatible mask - no CSS animation, let GSAP handle it */
  .gsap-mask {
    /* No initial clip-path - let GSAP set it */
  }
  
  /* Scroll container styling - only for components that need it */
  .scroll-container {
    position: absolute;
    inset: 0;
  }
  
  .scroll-container img {
    width: 110% !important;
    height: 110% !important;
    object-fit: cover;
  }
  
  @media (min-width: 768px) {
    .scroll-container img {
      width: 123% !important;
      height: 123% !important;
    }
  }
</style>

<script>
  // Add simple mask animation on scroll for components that need it
  document.addEventListener('DOMContentLoaded', () => {
    const simpleMaskContainers = document.querySelectorAll('.simple-mask');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
        }
      });
    }, {
      threshold: 0.3,
      rootMargin: '0px 0px -100px 0px'
    });
    
    simpleMaskContainers.forEach((container) => {
      observer.observe(container);
    });
  });
</script>


