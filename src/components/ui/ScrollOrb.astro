---
---

<div id="scroll-orb" class="scroll-orb-container" style="display: none;">
  <div class="scroll-orb"></div>
</div>

<style>
  .scroll-orb-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 100;
  }
  
  .scroll-orb {
    position: absolute;
    width: 24rem;
    height: 24rem;
    border-radius: 50%;
    filter: blur(4px);
    background: radial-gradient(circle at 30% 30%, 
      rgba(200, 200, 200, 0.4) 0%, 
      rgba(180, 180, 180, 0.3) 40%, 
      rgba(160, 160, 160, 0.2) 70%, 
      rgba(140, 140, 140, 0.1) 100%);
    box-shadow: 
      inset 0 0 50px rgba(255, 255, 255, 0.15),
      0 0 100px rgba(200, 200, 200, 0.15),
      0 0 200px rgba(180, 180, 180, 0.1);
    animation: rotateOrb 20s linear infinite;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease-out;
  }
  
  @keyframes rotateOrb {
    0% {
      transform: translate(-50%, -50%) rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    }
    100% {
      transform: translate(-50%, -50%) rotateX(360deg) rotateY(360deg) rotateZ(360deg);
    }
  }
  
  /* Section-specific effects */
  .orb-hero {
    background: radial-gradient(circle at 30% 30%, 
      rgba(200, 200, 200, 0.5) 0%, 
      rgba(180, 180, 180, 0.4) 40%, 
      rgba(160, 160, 160, 0.3) 70%, 
      rgba(140, 140, 140, 0.2) 100%);
    box-shadow: 
      inset 0 0 60px rgba(255, 255, 255, 0.2),
      0 0 120px rgba(200, 200, 200, 0.2),
      0 0 240px rgba(180, 180, 180, 0.15);
  }
  
  .orb-projects {
    background: radial-gradient(circle at 30% 30%, 
      rgba(100, 150, 200, 0.4) 0%, 
      rgba(80, 130, 180, 0.3) 40%, 
      rgba(60, 110, 160, 0.2) 70%, 
      rgba(40, 90, 140, 0.1) 100%);
    box-shadow: 
      inset 0 0 50px rgba(100, 150, 200, 0.2),
      0 0 100px rgba(100, 150, 200, 0.15),
      0 0 200px rgba(80, 130, 180, 0.1);
  }
  
  .orb-about {
    background: radial-gradient(circle at 30% 30%, 
      rgba(200, 180, 150, 0.4) 0%, 
      rgba(180, 160, 130, 0.3) 40%, 
      rgba(160, 140, 110, 0.2) 70%, 
      rgba(140, 120, 90, 0.1) 100%);
    box-shadow: 
      inset 0 0 50px rgba(200, 180, 150, 0.2),
      0 0 100px rgba(200, 180, 150, 0.15),
      0 0 200px rgba(180, 160, 130, 0.1);
  }
  
  .orb-footer {
    background: radial-gradient(circle at 30% 30%, 
      rgba(150, 150, 150, 0.3) 0%, 
      rgba(130, 130, 130, 0.2) 40%, 
      rgba(110, 110, 110, 0.1) 70%, 
      rgba(90, 90, 90, 0.05) 100%);
    box-shadow: 
      inset 0 0 40px rgba(150, 150, 150, 0.1),
      0 0 80px rgba(150, 150, 150, 0.1),
      0 0 160px rgba(130, 130, 130, 0.05);
    animation: rotateOrb 30s linear infinite;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .scroll-orb {
      width: 14rem;
      height: 14rem;
    }
  }
</style>

<script>
  (() => {
    const container = document.querySelector('.scroll-orb-container') as HTMLElement | null;
    const orb = document.querySelector('.scroll-orb') as HTMLElement | null;
    if (!container || !orb) return;

    let isInitialized = false;
    let initTimer: number | null = null;

    const isHome = () => window.location.pathname === '/' || window.location.pathname === '';
    const isMenuOpen = () => document.body.classList.contains('menu-open');

    const init = () => {
      if (isInitialized) return;
      isInitialized = true;
      container.style.display = 'block';
      container.style.opacity = '0';
      container.style.transform = 'scale(0.9)';
      setTimeout(() => {
        container.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        container.style.opacity = '1';
        container.style.transform = 'scale(1)';
      }, 50);
      bindScroll();
      bindResize();
      update();
    };

    const destroy = () => {
      isInitialized = false;
      container.style.transition = 'opacity 0.2s ease';
      container.style.opacity = '0';
      setTimeout(() => { container.style.display = 'none'; }, 200);
      if (initTimer) { clearTimeout(initTimer); initTimer = null; }
    };

    const applyVisibility = () => {
      if (isHome() && !isMenuOpen()) {
        if (!isInitialized) init();
        else { container.style.display = 'block'; container.style.opacity = '1'; }
      } else {
        destroy();
      }
    };

    const update = () => {
      if (!isInitialized) return;
      const scrollY = window.scrollY;
      const windowH = window.innerHeight;
      const docH = document.documentElement.scrollHeight;
      const progress = docH > windowH ? scrollY / (docH - windowH) : 0;
      const left = 50 + Math.sin(progress * Math.PI * 2) * 15;
      const top = 30 + Math.sin(progress * Math.PI) * 20;
      orb.style.left = left + '%';
      orb.style.top = top + '%';
      orb.style.transform = 'translate(-50%, -50%)';
      orb.style.opacity = '0.6';
    };

    const bindScroll = () => {
      let ticking = false;
      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(() => { update(); ticking = false; });
          ticking = true;
        }
      }, { passive: true });
    };

    const bindResize = () => {
      window.addEventListener('resize', update);
    };

    const delayedInit = () => {
      if (initTimer) clearTimeout(initTimer);
      initTimer = window.setTimeout(applyVisibility, 800);
    };

    const setupRouteHooks = () => {
      window.addEventListener('popstate', delayedInit);
      if (window.barba) {
        window.barba.hooks.afterEnter(() => delayedInit());
        window.barba.hooks.beforeEnter(() => destroy());
      }
    };

    // Observe menu-open class on body to hide orb while menu is open
    const bodyObserver = new MutationObserver(() => applyVisibility());
    bodyObserver.observe(document.body, { attributes: true, attributeFilter: ['class'] });

    const onReady = () => { delayedInit(); setupRouteHooks(); };
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', onReady);
    } else {
      onReady();
    }
  })();
</script>
